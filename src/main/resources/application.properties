# MySQL Database Configuration
#spring.datasource.url=jdbc:mysql://localhost:3306/foo_erp?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.datasource.username=root
#spring.datasource.password=

# Initialize schema and data
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql

# MyBatis Configuration
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=cn.shinefan.fooerp.model
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=30
mybatis.configuration.cache-enabled=false

# Logging Configuration
logging.level.cn.shinefan.fooerp.mapper=DEBUG

# Server Configuration
server.port=8080

# Thymeleaf Configuration
spring.thymeleaf.cache=false

# Redis Configuration (for distributed session)
spring.redis.host=localhost
spring.redis.port=6379

# Spring Session Configuration
spring.session.store-type=redis
spring.session.redis.flush-mode=on-save
spring.session.redis.namespace=spring:session
# Session timeout in seconds (30 minutes)
server.servlet.session.timeout=1800

# ShardingSphere Configuration
spring.shardingsphere.mode.type=Memory
spring.shardingsphere.datasource.names=ds0
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/foo_erp?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=

# Sharding Rules
spring.shardingsphere.rules.sharding.tables.users.actual-data-nodes=ds0.users_$->{0..1}
spring.shardingsphere.rules.sharding.tables.users.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.users.table-strategy.standard.sharding-algorithm-name=users_inline
spring.shardingsphere.rules.sharding.tables.users.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.users.key-generate-strategy.key-generator-name=snowflake

spring.shardingsphere.rules.sharding.tables.users_roles.actual-data-nodes=ds0.users_roles_$->{0..1}
spring.shardingsphere.rules.sharding.tables.users_roles.table-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.users_roles.table-strategy.standard.sharding-algorithm-name=users_roles_inline

# Binding Tables
spring.shardingsphere.rules.sharding.binding-tables[0]=users,users_roles

# Sharding Algorithms
spring.shardingsphere.rules.sharding.sharding-algorithms.users_inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.users_inline.props.algorithm-expression=users_$->{id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.users_roles_inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.users_roles_inline.props.algorithm-expression=users_roles_$->{user_id % 2}

# Key Generators
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE

# Properties
spring.shardingsphere.props.sql-show=true
